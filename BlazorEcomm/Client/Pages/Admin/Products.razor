@page "/admin/products"
@inject IProductService productService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]


<h3>Products</h3>

@if(productService.AdminProducts == null){
    <span>Loading Products....</span>
}
else{
    <button class="btn btn-primary float-end" @onclick="CreateProduct">
        <i class="oi oi-plus"></i> Add New Product
    </button>


    <table class="table">
        <thead>
            <tr>
            <th></th>
            <th>Product</th>
            <th>Variant</th>
            <th>Price</th>
            <th>Visible</th>
            <th></th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="productService.AdminProducts" Context="product">
            <tr>
                <td><img src="@product.ImageUrl" /></td>
                <td>@product.Title</td>
                <td>
                    @foreach (var variant in product.Variants)
                    {
                        <span>@variant.ProductType.Name</span>
                        <br />
                        
                    }
                </td>
                <td>
                    @foreach (var variant in product.Variants)
                    {
                        <span>@variant.Price</span>
                        <br />
                    }
                </td>
                <td>@(product.Visibility ? "✔️" : "")</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => EditProduct(product.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>

                        <button class="btn btn-primary" @onclick="(() => QuickEditNameDescription(product.Id))">
                            <i class="oi oi-cloud-upload"></i>
                        </button>


                </td>
            </tr>
            </Virtualize>
        </tbody>
    </table>


}
<EditNameAndDescriptionDialog ProductId="ProductId" @ref="EditNameAndDescDialog" CloseEventCallback="AddDialogSaveSuccess"/>

@code {

    protected EditNameAndDescriptionDialog EditNameAndDescDialog { get; set; }

    public int ProductId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await productService.GetAdminProducts();
    }

    void EditProduct(int productId)
    {
        navigationManager.NavigateTo($"admin/product/{productId}");
    }


    void QuickEditNameDescription(int productId)
    {
        EditNameAndDescDialog.Show();
        ProductId = productId;
    }

    void CreateProduct()
    {
        navigationManager.NavigateTo($"admin/product");
    }

    public async void AddDialogSaveSuccess()
    {
        await productService.GetAdminProducts();
        StateHasChanged();
    }
}
